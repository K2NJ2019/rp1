1. Vector

All elements must be of the same type.

For example, the following code create two vectors.

name <- c("Mike", "Lucy", "John") 
age <- c(20, 25, 30) 


2. Array & Matrix

Matrix is a special kind of vector. A matrix is a vector with two additional attributes: the number of rows and the number of columns.

> x <- matrix(c(1,2,3,4), nrow=2, ncol=2)
> x
     [,1] [,2]
[1,]    1    3
[2,]    2    4


3. List

List can contain elements of different types.

> y <- list(name="Mike", gender="M", company="ProgramCreek")
> y
$name
[1] "Mike"
$gender
[1] "M"
nae$company
[1] "ProgramCreek"


4. Data Frame

A data frame is used for storing data tables. It is a list of vectors of equal length.

For example, you can create a date frame by using the following code:

> name <- c("Mike", "Lucy", "John") 
> age <- c(20, 25, 30) 
> student <- c(TRUE, FALSE, TRUE) 
> df = data.frame(name, age, student)  
> df
  name age student
1 Mike  20    TRUE
2 Lucy  25   FALSE
3 John  30    TRUE

------------------------------------------------------------------------
apply(), lapply(), sapply(), tapply() Function in R with Examples
------------------------------------------------------------------------
The purpose of apply() is primarily to avoid explicit uses of loop constructs.


The simplest example is to sum a matrice over all the columns. The code apply(m1, 2, sum) will apply the sum function to the matrix 5x6 and return the sum of each column accessible in the dataset.

apply(X, MARGIN, FUN)

m1 <- matrix(C<-(1:10),nrow=5, ncol=6)
m1
a_m1 <- apply(m1, 2, sum) ##margin=1 is for rows and 2 for columns
a_m1

-------------------------------------------------------------------------
lapply() function

lapply(X, FUN)

l in lapply() stands for list. The difference between lapply() and apply() lies between the output return. The output of lapply() is a list. lapply() can be used for other objects like data frames and lists.
lapply() function does not need MARGIN.


movies <- c("SPYDERMAN","BATMAN","VERTIGO","CHINATOWN")
movies_lower <-lapply(movies, tolower)
str(movies_lower)
Output:

## List of 4
## $:chr"spyderman"
## $:chr"batman"
## $:chr"vertigo"
## $:chr"chinatown"

We can use unlist() to convert the list into a vector.

movies_lower <-unlist(lapply(movies,tolower))
str(movies_lower)
Output:

##  chr [1:4] "spyderman" "batman" "vertigo" "chinatown"

------------------------------------------------------------------------

sapply() function
sapply() function does the same jobs as lapply() function but returns a vector.

sapply(X, FUN)
We can measure the minimum speed and stopping distances of cars from the cars dataset.

dt <- cars
lmn_cars <- lapply(dt, min)
smn_cars <- sapply(dt, min)
lmn_cars
Output:

## $speed
## [1] 4
## $dist
## [1] 2
smn_cars
Output:

## speed  dist 
##     4     2

------------------------------------------------------------------------
tapply() function
The function tapply() computes a measure (mean, median, min, max, etc..) or a function for each factor variable in a vector.

data(iris)
tapply(iris$Sepal.Width, iris$Species, median)
Output:

##     setosa versicolor  virginica 
##        3.4        2.8        3.0

------------------------------------------------------------------------
Converting Numeric Variables to Factor
------------------------------------------------------------------------

1. Using Column Index Numbers


In this case, we are converting first, second, third and fifth numeric variables to factor variables. mydata is a data frame.
names <- c(1:3,5)
mydata[,names] <- lapply(mydata[,names] , factor)
str(mydata)


2. Using Column Names


In this case, we are converting two variables 'Credit' and 'Balance' to factor variables.
names <- c('Credit' ,'Balance')
mydata[,names] <- lapply(mydata[,names] , factor)
str(mydata)
    

3.  Converting all variables
col_names <- names(mydata)
mydata[,col_names] <- lapply(mydata[,col_names] , factor)


4.  Converting all numeric variables
mydata[sapply(mydata, is.numeric)] <- lapply(mydata[sapply(mydata, is.numeric)], as.factor)


5. Checking unique values in a variable and convert to factor only those variables having unique count less than 4
col_names <- sapply(mydata, function(col) length(unique(col)) < 4)
mydata[ , col_names] <- lapply(mydata[ , col_names] , factor)
